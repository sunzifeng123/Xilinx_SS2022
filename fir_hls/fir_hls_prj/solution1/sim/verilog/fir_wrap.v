// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_wrap_fir_wrap,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=29252,HLS_SYN_LUT=9671,HLS_VERSION=2020_2}" *)

module fir_wrap (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_pp0_stage0 = 22'd256;
parameter    ap_ST_fsm_state11 = 22'd512;
parameter    ap_ST_fsm_state12 = 22'd1024;
parameter    ap_ST_fsm_state13 = 22'd2048;
parameter    ap_ST_fsm_state14 = 22'd4096;
parameter    ap_ST_fsm_state15 = 22'd8192;
parameter    ap_ST_fsm_state16 = 22'd16384;
parameter    ap_ST_fsm_state17 = 22'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 22'd65536;
parameter    ap_ST_fsm_state29 = 22'd131072;
parameter    ap_ST_fsm_state30 = 22'd262144;
parameter    ap_ST_fsm_state31 = 22'd524288;
parameter    ap_ST_fsm_state32 = 22'd1048576;
parameter    ap_ST_fsm_state33 = 22'd2097152;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] y;
wire   [63:0] x;
wire   [31:0] len;
wire   [63:0] coef;
reg   [31:0] c_0;
reg   [31:0] c_98;
reg   [31:0] c_97;
reg   [31:0] c_96;
reg   [31:0] c_95;
reg   [31:0] c_94;
reg   [31:0] c_93;
reg   [31:0] c_92;
reg   [31:0] c_91;
reg   [31:0] c_90;
reg   [31:0] c_89;
reg   [31:0] c_88;
reg   [31:0] c_87;
reg   [31:0] c_86;
reg   [31:0] c_85;
reg   [31:0] c_84;
reg   [31:0] c_83;
reg   [31:0] c_82;
reg   [31:0] c_81;
reg   [31:0] c_80;
reg   [31:0] c_79;
reg   [31:0] c_78;
reg   [31:0] c_77;
reg   [31:0] c_76;
reg   [31:0] c_75;
reg   [31:0] c_74;
reg   [31:0] c_73;
reg   [31:0] c_72;
reg   [31:0] c_71;
reg   [31:0] c_70;
reg   [31:0] c_69;
reg   [31:0] c_68;
reg   [31:0] c_67;
reg   [31:0] c_66;
reg   [31:0] c_65;
reg   [31:0] c_64;
reg   [31:0] c_63;
reg   [31:0] c_62;
reg   [31:0] c_61;
reg   [31:0] c_60;
reg   [31:0] c_59;
reg   [31:0] c_58;
reg   [31:0] c_57;
reg   [31:0] c_56;
reg   [31:0] c_55;
reg   [31:0] c_54;
reg   [31:0] c_53;
reg   [31:0] c_52;
reg   [31:0] c_51;
reg   [31:0] c_50;
reg   [31:0] c_49;
reg   [31:0] c_48;
reg   [31:0] c_47;
reg   [31:0] c_46;
reg   [31:0] c_45;
reg   [31:0] c_44;
reg   [31:0] c_43;
reg   [31:0] c_42;
reg   [31:0] c_41;
reg   [31:0] c_40;
reg   [31:0] c_39;
reg   [31:0] c_38;
reg   [31:0] c_37;
reg   [31:0] c_36;
reg   [31:0] c_35;
reg   [31:0] c_34;
reg   [31:0] c_33;
reg   [31:0] c_32;
reg   [31:0] c_31;
reg   [31:0] c_30;
reg   [31:0] c_29;
reg   [31:0] c_28;
reg   [31:0] c_27;
reg   [31:0] c_26;
reg   [31:0] c_25;
reg   [31:0] c_24;
reg   [31:0] c_23;
reg   [31:0] c_22;
reg   [31:0] c_21;
reg   [31:0] c_20;
reg   [31:0] c_19;
reg   [31:0] c_18;
reg   [31:0] c_17;
reg   [31:0] c_16;
reg   [31:0] c_15;
reg   [31:0] c_14;
reg   [31:0] c_13;
reg   [31:0] c_12;
reg   [31:0] c_11;
reg   [31:0] c_10;
reg   [31:0] c_9;
reg   [31:0] c_8;
reg   [31:0] c_7;
reg   [31:0] c_6;
reg   [31:0] c_5;
reg   [31:0] c_4;
reg   [31:0] c_3;
reg   [31:0] c_2;
reg   [31:0] c_1;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln47_reg_1902;
reg    gmem_blk_n_AW;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp1_iter10;
reg   [0:0] icmp_ln47_reg_1902_pp1_iter9_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state33;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [6:0] i_reg_750;
reg   [30:0] i_1_reg_762;
reg   [31:0] len_read_reg_1853;
reg   [63:0] x_read_reg_1860;
reg   [63:0] y_read_reg_1865;
reg   [63:0] gmem_addr_reg_1870;
wire   [6:0] add_ln41_fu_1192_p2;
reg   [6:0] add_ln41_reg_1876;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln41_fu_1198_p2;
reg   [0:0] icmp_ln41_reg_1881;
wire   [30:0] i_2_fu_1838_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state18_pp1_stage0_iter0;
reg    ap_block_state19_pp1_stage0_iter1;
wire    ap_block_state20_pp1_stage0_iter2;
wire    ap_block_state21_pp1_stage0_iter3;
wire    ap_block_state22_pp1_stage0_iter4;
wire    ap_block_state23_pp1_stage0_iter5;
wire    ap_block_state24_pp1_stage0_iter6;
wire    ap_block_state25_pp1_stage0_iter7;
wire    ap_block_state26_pp1_stage0_iter8;
wire    ap_block_state27_pp1_stage0_iter9;
wire    ap_block_state28_pp1_stage0_iter10;
reg    ap_block_state28_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln47_fu_1848_p2;
reg   [0:0] icmp_ln47_reg_1902_pp1_iter1_reg;
reg   [0:0] icmp_ln47_reg_1902_pp1_iter2_reg;
reg   [0:0] icmp_ln47_reg_1902_pp1_iter3_reg;
reg   [0:0] icmp_ln47_reg_1902_pp1_iter4_reg;
reg   [0:0] icmp_ln47_reg_1902_pp1_iter5_reg;
reg   [0:0] icmp_ln47_reg_1902_pp1_iter6_reg;
reg   [0:0] icmp_ln47_reg_1902_pp1_iter7_reg;
reg   [0:0] icmp_ln47_reg_1902_pp1_iter8_reg;
reg   [31:0] gmem_addr_1_read_reg_1906;
wire   [31:0] grp_fir_fu_773_ap_return;
reg   [31:0] res_reg_1911;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
wire    ap_CS_fsm_state17;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state18;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
wire    grp_fir_fu_773_ap_start;
wire    grp_fir_fu_773_ap_done;
wire    grp_fir_fu_773_ap_idle;
wire    grp_fir_fu_773_ap_ready;
reg    grp_fir_fu_773_ap_ce;
wire    ap_block_state18_pp1_stage0_iter0_ignore_call3;
reg    ap_block_state19_pp1_stage0_iter1_ignore_call3;
wire    ap_block_state20_pp1_stage0_iter2_ignore_call3;
wire    ap_block_state21_pp1_stage0_iter3_ignore_call3;
wire    ap_block_state22_pp1_stage0_iter4_ignore_call3;
wire    ap_block_state23_pp1_stage0_iter5_ignore_call3;
wire    ap_block_state24_pp1_stage0_iter6_ignore_call3;
wire    ap_block_state25_pp1_stage0_iter7_ignore_call3;
wire    ap_block_state26_pp1_stage0_iter8_ignore_call3;
wire    ap_block_state27_pp1_stage0_iter9_ignore_call3;
wire    ap_block_state28_pp1_stage0_iter10_ignore_call3;
reg    ap_block_pp1_stage0_11001_ignoreCallOp291;
reg   [6:0] ap_phi_mux_i_phi_fu_754_p4;
reg    grp_fir_fu_773_ap_start_reg;
wire  signed [63:0] sext_ln41_fu_1182_p1;
wire  signed [63:0] sext_ln50_fu_1816_p1;
wire   [63:0] sext_ln51_fu_1827_p1;
reg    ap_block_state11_io;
reg    ap_block_pp1_stage0_01001;
wire   [61:0] trunc_ln_fu_1172_p4;
wire   [61:0] trunc_ln1_fu_1798_p4;
wire   [61:0] trunc_ln47_1_fu_1807_p4;
wire   [31:0] zext_ln47_fu_1844_p1;
reg   [21:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
#0 c_0 = 32'd0;
#0 c_98 = 32'd0;
#0 c_97 = 32'd0;
#0 c_96 = 32'd0;
#0 c_95 = 32'd0;
#0 c_94 = 32'd0;
#0 c_93 = 32'd0;
#0 c_92 = 32'd0;
#0 c_91 = 32'd0;
#0 c_90 = 32'd0;
#0 c_89 = 32'd0;
#0 c_88 = 32'd0;
#0 c_87 = 32'd0;
#0 c_86 = 32'd0;
#0 c_85 = 32'd0;
#0 c_84 = 32'd0;
#0 c_83 = 32'd0;
#0 c_82 = 32'd0;
#0 c_81 = 32'd0;
#0 c_80 = 32'd0;
#0 c_79 = 32'd0;
#0 c_78 = 32'd0;
#0 c_77 = 32'd0;
#0 c_76 = 32'd0;
#0 c_75 = 32'd0;
#0 c_74 = 32'd0;
#0 c_73 = 32'd0;
#0 c_72 = 32'd0;
#0 c_71 = 32'd0;
#0 c_70 = 32'd0;
#0 c_69 = 32'd0;
#0 c_68 = 32'd0;
#0 c_67 = 32'd0;
#0 c_66 = 32'd0;
#0 c_65 = 32'd0;
#0 c_64 = 32'd0;
#0 c_63 = 32'd0;
#0 c_62 = 32'd0;
#0 c_61 = 32'd0;
#0 c_60 = 32'd0;
#0 c_59 = 32'd0;
#0 c_58 = 32'd0;
#0 c_57 = 32'd0;
#0 c_56 = 32'd0;
#0 c_55 = 32'd0;
#0 c_54 = 32'd0;
#0 c_53 = 32'd0;
#0 c_52 = 32'd0;
#0 c_51 = 32'd0;
#0 c_50 = 32'd0;
#0 c_49 = 32'd0;
#0 c_48 = 32'd0;
#0 c_47 = 32'd0;
#0 c_46 = 32'd0;
#0 c_45 = 32'd0;
#0 c_44 = 32'd0;
#0 c_43 = 32'd0;
#0 c_42 = 32'd0;
#0 c_41 = 32'd0;
#0 c_40 = 32'd0;
#0 c_39 = 32'd0;
#0 c_38 = 32'd0;
#0 c_37 = 32'd0;
#0 c_36 = 32'd0;
#0 c_35 = 32'd0;
#0 c_34 = 32'd0;
#0 c_33 = 32'd0;
#0 c_32 = 32'd0;
#0 c_31 = 32'd0;
#0 c_30 = 32'd0;
#0 c_29 = 32'd0;
#0 c_28 = 32'd0;
#0 c_27 = 32'd0;
#0 c_26 = 32'd0;
#0 c_25 = 32'd0;
#0 c_24 = 32'd0;
#0 c_23 = 32'd0;
#0 c_22 = 32'd0;
#0 c_21 = 32'd0;
#0 c_20 = 32'd0;
#0 c_19 = 32'd0;
#0 c_18 = 32'd0;
#0 c_17 = 32'd0;
#0 c_16 = 32'd0;
#0 c_15 = 32'd0;
#0 c_14 = 32'd0;
#0 c_13 = 32'd0;
#0 c_12 = 32'd0;
#0 c_11 = 32'd0;
#0 c_10 = 32'd0;
#0 c_9 = 32'd0;
#0 c_8 = 32'd0;
#0 c_7 = 32'd0;
#0 c_6 = 32'd0;
#0 c_5 = 32'd0;
#0 c_4 = 32'd0;
#0 c_3 = 32'd0;
#0 c_2 = 32'd0;
#0 c_1 = 32'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 grp_fir_fu_773_ap_start_reg = 1'b0;
end

fir_wrap_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .len(len),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

fir_wrap_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .y(y),
    .x(x),
    .coef(coef)
);

fir_wrap_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(sext_ln51_fu_1827_p1),
    .I_AWID(1'd0),
    .I_AWLEN(len_read_reg_1853),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(res_reg_1911),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

fir_wrap_fir grp_fir_fu_773(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fir_fu_773_ap_start),
    .ap_done(grp_fir_fu_773_ap_done),
    .ap_idle(grp_fir_fu_773_ap_idle),
    .ap_ready(grp_fir_fu_773_ap_ready),
    .ap_ce(grp_fir_fu_773_ap_ce),
    .x(gmem_addr_1_read_reg_1906),
    .c_0(c_0),
    .c_98(c_98),
    .c_97(c_97),
    .c_96(c_96),
    .c_95(c_95),
    .c_94(c_94),
    .c_93(c_93),
    .c_92(c_92),
    .c_91(c_91),
    .c_90(c_90),
    .c_89(c_89),
    .c_88(c_88),
    .c_87(c_87),
    .c_86(c_86),
    .c_85(c_85),
    .c_84(c_84),
    .c_83(c_83),
    .c_82(c_82),
    .c_81(c_81),
    .c_80(c_80),
    .c_79(c_79),
    .c_78(c_78),
    .c_77(c_77),
    .c_76(c_76),
    .c_75(c_75),
    .c_74(c_74),
    .c_73(c_73),
    .c_72(c_72),
    .c_71(c_71),
    .c_70(c_70),
    .c_69(c_69),
    .c_68(c_68),
    .c_67(c_67),
    .c_66(c_66),
    .c_65(c_65),
    .c_64(c_64),
    .c_63(c_63),
    .c_62(c_62),
    .c_61(c_61),
    .c_60(c_60),
    .c_59(c_59),
    .c_58(c_58),
    .c_57(c_57),
    .c_56(c_56),
    .c_55(c_55),
    .c_54(c_54),
    .c_53(c_53),
    .c_52(c_52),
    .c_51(c_51),
    .c_50(c_50),
    .c_49(c_49),
    .c_48(c_48),
    .c_47(c_47),
    .c_46(c_46),
    .c_45(c_45),
    .c_44(c_44),
    .c_43(c_43),
    .c_42(c_42),
    .c_41(c_41),
    .c_40(c_40),
    .c_39(c_39),
    .c_38(c_38),
    .c_37(c_37),
    .c_36(c_36),
    .c_35(c_35),
    .c_34(c_34),
    .c_33(c_33),
    .c_32(c_32),
    .c_31(c_31),
    .c_30(c_30),
    .c_29(c_29),
    .c_28(c_28),
    .c_27(c_27),
    .c_26(c_26),
    .c_25(c_25),
    .c_24(c_24),
    .c_23(c_23),
    .c_22(c_22),
    .c_21(c_21),
    .c_20(c_20),
    .c_19(c_19),
    .c_18(c_18),
    .c_17(c_17),
    .c_16(c_16),
    .c_15(c_15),
    .c_14(c_14),
    .c_13(c_13),
    .c_12(c_12),
    .c_11(c_11),
    .c_10(c_10),
    .c_9(c_9),
    .c_8(c_8),
    .c_7(c_7),
    .c_6(c_6),
    .c_5(c_5),
    .c_4(c_4),
    .c_3(c_3),
    .c_2(c_2),
    .c_1(c_1),
    .ap_return(grp_fir_fu_773_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state18)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state18);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fir_fu_773_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln47_reg_1902 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            grp_fir_fu_773_ap_start_reg <= 1'b1;
        end else if ((grp_fir_fu_773_ap_ready == 1'b1)) begin
            grp_fir_fu_773_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_fu_1848_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_762 <= i_2_fu_1838_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        i_1_reg_762 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_750 <= 7'd0;
    end else if (((icmp_ln41_reg_1881 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_750 <= add_ln41_reg_1876;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln41_reg_1876 <= add_ln41_fu_1192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_0 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_1 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd10) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_10 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd11) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_11 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd12) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_12 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd13) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_13 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd14) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_14 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd15) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_15 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd16) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_16 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd17) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_17 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd18) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_18 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd19) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_19 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_2 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd20) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_20 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd21) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_21 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd22) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_22 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd23) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_23 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd24) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_24 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd25) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_25 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd26) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_26 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd27) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_27 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd28) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_28 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd29) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_29 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_3 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd30) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_30 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd31) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_31 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd32) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_32 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd33) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_33 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd34) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_34 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd35) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_35 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd36) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_36 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd37) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_37 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd38) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_38 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd39) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_39 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_4 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd40) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_40 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd41) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_41 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd42) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_42 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd43) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_43 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd44) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_44 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd45) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_45 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd46) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_46 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd47) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_47 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd48) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_48 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd49) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_49 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_5 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd50) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_50 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd51) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_51 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd52) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_52 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd53) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_53 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd54) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_54 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd55) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_55 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd56) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_56 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd57) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_57 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd58) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_58 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd59) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_59 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_6 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd60) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_60 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd61) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_61 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd62) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_62 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd63) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_63 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd64) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_64 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd65) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_65 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd66) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_66 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd67) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_67 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd68) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_68 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd69) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_69 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_7 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd70) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_70 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd71) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_71 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd72) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_72 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd73) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_73 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd74) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_74 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd75) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_75 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd76) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_76 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd77) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_77 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd78) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_78 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd79) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_79 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd8) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_8 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd80) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_80 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd81) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_81 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd82) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_82 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd83) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_83 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd84) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_84 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd85) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_85 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd86) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_86 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd87) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_87 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd88) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_88 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd89) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_89 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd9) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_9 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd90) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_90 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd91) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_91 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd92) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_92 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd93) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_93 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd94) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_94 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd95) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_95 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd96) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_96 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_750 == 7'd97) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_97 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((i_reg_750 == 7'd98) | ((i_reg_750 == 7'd99) | ((i_reg_750 == 7'd100) | ((i_reg_750 == 7'd101) | ((i_reg_750 == 7'd102) | ((i_reg_750 == 7'd103) | ((i_reg_750 == 7'd104) | ((i_reg_750 == 7'd105) | ((i_reg_750 == 7'd106) | ((i_reg_750 == 7'd107) | ((i_reg_750 == 7'd108) | ((i_reg_750 == 7'd109) | ((i_reg_750 == 7'd110) | ((i_reg_750 == 7'd111) | ((i_reg_750 == 7'd112) | ((i_reg_750 == 7'd113) | ((i_reg_750 == 7'd114) | ((i_reg_750 == 7'd115) | ((i_reg_750 == 7'd116) | ((i_reg_750 == 7'd117) | ((i_reg_750 == 7'd118) | ((i_reg_750 == 7'd119) | ((i_reg_750 == 7'd120) | ((i_reg_750 == 7'd121) | ((i_reg_750 == 7'd122) | ((i_reg_750 == 7'd123) | ((i_reg_750 == 7'd124) | ((i_reg_750 == 7'd125) | ((i_reg_750 == 7'd126) | (i_reg_750 == 7'd127)))))))))))))))))))))))))))))))) begin
        c_98 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_reg_1902 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        gmem_addr_1_read_reg_1906 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        gmem_addr_reg_1870 <= sext_ln41_fu_1182_p1;
        len_read_reg_1853 <= len;
        x_read_reg_1860 <= x;
        y_read_reg_1865 <= y;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln41_reg_1881 <= icmp_ln41_fu_1198_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln47_reg_1902 <= icmp_ln47_fu_1848_p2;
        icmp_ln47_reg_1902_pp1_iter1_reg <= icmp_ln47_reg_1902;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln47_reg_1902_pp1_iter2_reg <= icmp_ln47_reg_1902_pp1_iter1_reg;
        icmp_ln47_reg_1902_pp1_iter3_reg <= icmp_ln47_reg_1902_pp1_iter2_reg;
        icmp_ln47_reg_1902_pp1_iter4_reg <= icmp_ln47_reg_1902_pp1_iter3_reg;
        icmp_ln47_reg_1902_pp1_iter5_reg <= icmp_ln47_reg_1902_pp1_iter4_reg;
        icmp_ln47_reg_1902_pp1_iter6_reg <= icmp_ln47_reg_1902_pp1_iter5_reg;
        icmp_ln47_reg_1902_pp1_iter7_reg <= icmp_ln47_reg_1902_pp1_iter6_reg;
        icmp_ln47_reg_1902_pp1_iter8_reg <= icmp_ln47_reg_1902_pp1_iter7_reg;
        icmp_ln47_reg_1902_pp1_iter9_reg <= icmp_ln47_reg_1902_pp1_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_reg_1902_pp1_iter8_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        res_reg_1911 <= grp_fir_fu_773_ap_return;
    end
end

always @ (*) begin
    if ((icmp_ln41_fu_1198_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln47_fu_1848_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_1881 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_754_p4 = add_ln41_reg_1876;
    end else begin
        ap_phi_mux_i_phi_fu_754_p4 = i_reg_750;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11))) begin
        gmem_ARADDR = sext_ln50_fu_1816_p1;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARADDR = gmem_addr_reg_1870;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11))) begin
        gmem_ARLEN = len_read_reg_1853;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARLEN = 32'd99;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln47_reg_1902 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_reg_1902_pp1_iter9_reg == 1'd1) & (ap_enable_reg_pp1_iter10 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln47_reg_1902 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln47_reg_1902_pp1_iter9_reg == 1'd1) & (ap_enable_reg_pp1_iter10 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001_ignoreCallOp291) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fir_fu_773_ap_ce = 1'b1;
    end else begin
        grp_fir_fu_773_ap_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln41_fu_1198_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln41_fu_1198_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln47_fu_1848_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((icmp_ln47_fu_1848_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln41_fu_1192_p2 = (ap_phi_mux_i_phi_fu_754_p4 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((gmem_RVALID == 1'b0) & (icmp_ln47_reg_1902 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp1_iter10 == 1'b1)) | ((gmem_RVALID == 1'b0) & (icmp_ln47_reg_1902 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001_ignoreCallOp291 = (((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp1_iter10 == 1'b1)) | ((gmem_RVALID == 1'b0) & (icmp_ln47_reg_1902 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp1_iter10 == 1'b1)) | ((gmem_RVALID == 1'b0) & (icmp_ln47_reg_1902 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = (gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state11_io = ((gmem_ARREADY == 1'b0) | (gmem_AWREADY == 1'b0));
end

assign ap_block_state18_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter0_ignore_call3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln47_reg_1902 == 1'd1));
end

always @ (*) begin
    ap_block_state19_pp1_stage0_iter1_ignore_call3 = ((gmem_RVALID == 1'b0) & (icmp_ln47_reg_1902 == 1'd1));
end

assign ap_block_state20_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter2_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter3_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter4_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter5_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter6_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter7_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter8_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter9_ignore_call3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_io = ((gmem_WREADY == 1'b0) & (icmp_ln47_reg_1902_pp1_iter9_reg == 1'd1));
end

assign ap_block_state28_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter10_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fir_fu_773_ap_start = grp_fir_fu_773_ap_start_reg;

assign i_2_fu_1838_p2 = (i_1_reg_762 + 31'd1);

assign icmp_ln41_fu_1198_p2 = ((ap_phi_mux_i_phi_fu_754_p4 == 7'd99) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_1848_p2 = (($signed(zext_ln47_fu_1844_p1) < $signed(len_read_reg_1853)) ? 1'b1 : 1'b0);

assign sext_ln41_fu_1182_p1 = $signed(trunc_ln_fu_1172_p4);

assign sext_ln50_fu_1816_p1 = $signed(trunc_ln1_fu_1798_p4);

assign sext_ln51_fu_1827_p1 = $signed(trunc_ln47_1_fu_1807_p4);

assign trunc_ln1_fu_1798_p4 = {{x_read_reg_1860[63:2]}};

assign trunc_ln47_1_fu_1807_p4 = {{y_read_reg_1865[63:2]}};

assign trunc_ln_fu_1172_p4 = {{coef[63:2]}};

assign zext_ln47_fu_1844_p1 = i_1_reg_762;

endmodule //fir_wrap
